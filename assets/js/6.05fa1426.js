(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{207:function(t,a,s){"use strict";s.r(a);var n=s(0),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"java基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java基础"}},[t._v("#")]),t._v(" JAVA基础")]),t._v(" "),s("h2",{attrs:{id:"输出语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#输出语句"}},[t._v("#")]),t._v(" 输出语句")]),t._v(" "),s("p",[t._v("System.out.println：先输出语句再换行")]),t._v(" "),s("p",[t._v("System.out.print：只输出语句")]),t._v(" "),s("h2",{attrs:{id:"变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[t._v("#")]),t._v(" 变量")]),t._v(" "),s("pre",[s("code",[t._v("### 1 变量的使用\n")])]),t._v(" "),s("p",[t._v("java定义变量的格式：数据类型 变量名 = 变量值")]),t._v(" "),s("p",[t._v("变量必须先声明，后使用；")]),t._v(" "),s("p",[t._v("变量都定义在其作用域内。在作用域内，它是有效的。")]),t._v(" "),s("p",[t._v("同一个作用域内，不可以声明两个同名的变量")]),t._v(" "),s("h2",{attrs:{id:"强制类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#强制类型转换"}},[t._v("#")]),t._v(" 强制类型转换")]),t._v(" "),s("p",[t._v("自动类型提升运算的逆运算")]),t._v(" "),s("p",[t._v("需要使用强转符：（）")]),t._v(" "),s("p",[t._v("强制类型转换可能会导致精度丢失（因为强转机制会执行截断操作）")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//精度损失举例1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" d1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12.9")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i1  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("d1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//截断操作")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//输出12")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//没有精度损失")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" l1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" s1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("l1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//精度损失举例2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),t._v(" b1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("i1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//输出-128")]),t._v("\n")])])]),s("h2",{attrs:{id:"数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),s("p",[t._v("​\t\t数组（Array），是多个相同")]),t._v(" "),s("h2",{attrs:{id:"程序、进程、线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#程序、进程、线程"}},[t._v("#")]),t._v(" 程序、进程、线程")]),t._v(" "),s("p",[s("strong",[t._v("程序")]),t._v("是为完成特定的任务、用某种语言编写的一组指令的集合。即指一段静态的代码，静态对象。")]),t._v(" "),s("p",[s("strong",[t._v("进程")]),t._v("是程序的一次执行过程，或是一个正在执行的程序。是一个动态的过程：有它自身的产生、存在和消亡的过程——声明周期")]),t._v(" "),s("blockquote",[s("p",[t._v("程序是静态的，进程是动态的")]),t._v(" "),s("p",[t._v("进程作为资源分配的单位，系统在运行时会为每个进程分配不同的内存区域")])]),t._v(" "),s("p",[s("strong",[t._v("线程")]),t._v("，进程可以进一步细分为线程，是一个程序内部的一条执行路径。")]),t._v(" "),s("blockquote",[s("p",[t._v("若一个进程同一时间并行执行多个线程，就是支持多线程的")]),t._v(" "),s("p",[t._v("线程作为调度和执行的单位，每个线程拥有独立的运行栈和程序计数器，线程切换的开销小")]),t._v(" "),s("p",[t._v("一个进程中的多个线程共享相同的内存单元/内存地址空间->它们从同一堆中分配对象，可以访问相同的变量和对象。这就使得线程间通信更简便、高效。但多个线程操作共享的系统资源可能就会带来安全的隐患。")])]),t._v(" "),s("h3",{attrs:{id:"并行与并发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#并行与并发"}},[t._v("#")]),t._v(" 并行与并发")]),t._v(" "),s("pre",[s("code",[t._v(">并行：多个cpu同时执行多个任务\n>\n>并发：一个cpu“同时”（快速切换）执行多个任务。比如：淘宝秒杀\n")])]),t._v(" "),s("h3",{attrs:{id:"使用多线程的优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用多线程的优点"}},[t._v("#")]),t._v(" 使用多线程的优点")]),t._v(" "),s("p",[t._v("提高应用程序的响应，对图形化界面更有意义，可以增强用户体验。")]),t._v(" "),s("p",[t._v("提高计算机系统cqu的使用率")]),t._v(" "),s("p",[t._v("改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和修改。")]),t._v(" "),s("h3",{attrs:{id:"何时需要使用多线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#何时需要使用多线程"}},[t._v("#")]),t._v(" 何时需要使用多线程")]),t._v(" "),s("p",[t._v("程序需要同时执行两个或多个任务时")]),t._v(" "),s("p",[t._v("程序需要实现一些需要等待的任务时，如用户输入、文件读写操作、网络操作、搜索等。")]),t._v(" "),s("p",[t._v("需要一些后台运行的程序时。")]),t._v(" "),s("h3",{attrs:{id:"多线程的创建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多线程的创建"}},[t._v("#")]),t._v(" 多线程的创建")]),t._v(" "),s("h4",{attrs:{id:"方式一：继承于thread类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方式一：继承于thread类"}},[t._v("#")]),t._v(" 方式一：继承于Thread类")]),t._v(" "),s("p",[t._v("​\t\t第一步：创建一个继承与Thread类子类")]),t._v(" "),s("p",[t._v("​\t\t第二步：重写Thread类的run方法")]),t._v(" "),s("p",[t._v("​\t\t第三步：创建Thread类的子类的对象")]),t._v(" "),s("p",[t._v("​\t\t第四步：通过此对象调用start()方法")])])}),[],!1,null,null,null);a.default=r.exports}}]);